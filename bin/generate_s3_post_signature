#!/usr/bin/env python3
"""
Generate a "Signature Version 4" signature for authenticating browser-based S3 uploads using POST.

Usage:
    env `cat .env` ./bin/generate_s3_post_signature
"""

import base64
import hashlib
import hmac
import os
import sys

# Configuration
region_name = "us-east-1"
service_name = "s3"
aws_request_type = "aws4_request"
signature_date = "20210721"
signature_date_time = "%sT000000Z" % signature_date


def sign(key, msg):
    return hmac.new(key, msg.encode("utf-8"), hashlib.sha256).digest()


def getSignatureKey(key, dateStamp, regionName, serviceName):
    kDate = sign(("AWS4" + key).encode("utf-8"), dateStamp)
    kRegion = sign(kDate, regionName)
    kService = sign(kRegion, serviceName)
    kSigning = sign(kService, aws_request_type)
    return kSigning


def main():
    access_key = os.getenv("AWS_ACCESS_KEY_ID")
    secret_key = os.getenv("AWS_SECRET_ACCESS_KEY")
    if access_key is None:
        print(
            'Error: Environment variable AWS_ACCESS_KEY_ID is not available.')
        sys.exit()
    if secret_key is None:
        print(
            'Error: Environment variable AWS_SECRET_ACCESS_KEY is not available.'
        )
        sys.exit()

    # Post policy document formatted as a JSON block
    post_policy_document = '{'
    post_policy_document += '"expiration": "2121-12-01T12:00:00.000Z",'
    post_policy_document += '"conditions": ['
    post_policy_document += '{ "bucket": "mbta-mss-test-uploads" },'
    post_policy_document += '["starts-with", "$key", ""],'
    post_policy_document += '{ "success_action_status": "201" },'
    post_policy_document += '{"x-amz-credential": "%s/%s/%s/%s/%s"},' % (
        access_key, signature_date, region_name, service_name,
        aws_request_type)
    post_policy_document += '{ "x-amz-algorithm": "AWS4-HMAC-SHA256" },'
    post_policy_document += '{ "x-amz-date": "%s" }' % signature_date_time
    post_policy_document += ']'
    post_policy_document += '}'

    signing_key = getSignatureKey(secret_key, signature_date, region_name,
                                  service_name)

    string_to_sign = base64.b64encode(post_policy_document.encode("utf8"))
    print("policy: %s" % string_to_sign)

    # Sign the string_to_sign using the signing_key
    signature = hmac.new(signing_key, string_to_sign,
                         hashlib.sha256).hexdigest()
    print("signature: %s" % signature)


if __name__ == '__main__':
    main()
